/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 905.0, "minX": 0.0, "maxY": 7545.0, "series": [{"data": [[0.0, 905.0], [0.1, 957.0], [0.2, 1023.0], [0.3, 1068.0], [0.4, 1085.0], [0.5, 1124.0], [0.6, 1136.0], [0.7, 1154.0], [0.8, 1166.0], [0.9, 1181.0], [1.0, 1192.0], [1.1, 1197.0], [1.2, 1204.0], [1.3, 1219.0], [1.4, 1251.0], [1.5, 1330.0], [1.6, 1358.0], [1.7, 1456.0], [1.8, 1466.0], [1.9, 1475.0], [2.0, 1496.0], [2.1, 1505.0], [2.2, 1520.0], [2.3, 1544.0], [2.4, 1563.0], [2.5, 1610.0], [2.6, 1633.0], [2.7, 1647.0], [2.8, 1667.0], [2.9, 1685.0], [3.0, 1761.0], [3.1, 1775.0], [3.2, 1782.0], [3.3, 1797.0], [3.4, 1811.0], [3.5, 1823.0], [3.6, 1829.0], [3.7, 1852.0], [3.8, 1865.0], [3.9, 1876.0], [4.0, 1900.0], [4.1, 1906.0], [4.2, 1914.0], [4.3, 1919.0], [4.4, 1926.0], [4.5, 1928.0], [4.6, 1937.0], [4.7, 1945.0], [4.8, 1957.0], [4.9, 1967.0], [5.0, 1980.0], [5.1, 1986.0], [5.2, 1999.0], [5.3, 2014.0], [5.4, 2019.0], [5.5, 2021.0], [5.6, 2030.0], [5.7, 2033.0], [5.8, 2048.0], [5.9, 2050.0], [6.0, 2053.0], [6.1, 2058.0], [6.2, 2062.0], [6.3, 2077.0], [6.4, 2089.0], [6.5, 2091.0], [6.6, 2098.0], [6.7, 2107.0], [6.8, 2112.0], [6.9, 2123.0], [7.0, 2126.0], [7.1, 2130.0], [7.2, 2137.0], [7.3, 2138.0], [7.4, 2142.0], [7.5, 2153.0], [7.6, 2162.0], [7.7, 2165.0], [7.8, 2175.0], [7.9, 2179.0], [8.0, 2181.0], [8.1, 2191.0], [8.2, 2195.0], [8.3, 2198.0], [8.4, 2198.0], [8.5, 2208.0], [8.6, 2215.0], [8.7, 2223.0], [8.8, 2229.0], [8.9, 2233.0], [9.0, 2236.0], [9.1, 2241.0], [9.2, 2247.0], [9.3, 2251.0], [9.4, 2251.0], [9.5, 2259.0], [9.6, 2266.0], [9.7, 2269.0], [9.8, 2276.0], [9.9, 2287.0], [10.0, 2292.0], [10.1, 2294.0], [10.2, 2296.0], [10.3, 2301.0], [10.4, 2302.0], [10.5, 2305.0], [10.6, 2309.0], [10.7, 2313.0], [10.8, 2319.0], [10.9, 2324.0], [11.0, 2329.0], [11.1, 2331.0], [11.2, 2335.0], [11.3, 2336.0], [11.4, 2337.0], [11.5, 2340.0], [11.6, 2342.0], [11.7, 2345.0], [11.8, 2346.0], [11.9, 2351.0], [12.0, 2354.0], [12.1, 2356.0], [12.2, 2360.0], [12.3, 2364.0], [12.4, 2365.0], [12.5, 2368.0], [12.6, 2368.0], [12.7, 2374.0], [12.8, 2377.0], [12.9, 2382.0], [13.0, 2389.0], [13.1, 2391.0], [13.2, 2396.0], [13.3, 2399.0], [13.4, 2400.0], [13.5, 2406.0], [13.6, 2408.0], [13.7, 2409.0], [13.8, 2412.0], [13.9, 2414.0], [14.0, 2417.0], [14.1, 2419.0], [14.2, 2422.0], [14.3, 2427.0], [14.4, 2428.0], [14.5, 2431.0], [14.6, 2432.0], [14.7, 2433.0], [14.8, 2435.0], [14.9, 2437.0], [15.0, 2442.0], [15.1, 2446.0], [15.2, 2447.0], [15.3, 2450.0], [15.4, 2452.0], [15.5, 2455.0], [15.6, 2461.0], [15.7, 2461.0], [15.8, 2468.0], [15.9, 2472.0], [16.0, 2478.0], [16.1, 2479.0], [16.2, 2481.0], [16.3, 2486.0], [16.4, 2490.0], [16.5, 2492.0], [16.6, 2493.0], [16.7, 2496.0], [16.8, 2500.0], [16.9, 2512.0], [17.0, 2513.0], [17.1, 2514.0], [17.2, 2515.0], [17.3, 2520.0], [17.4, 2521.0], [17.5, 2525.0], [17.6, 2529.0], [17.7, 2530.0], [17.8, 2536.0], [17.9, 2540.0], [18.0, 2540.0], [18.1, 2544.0], [18.2, 2548.0], [18.3, 2551.0], [18.4, 2553.0], [18.5, 2557.0], [18.6, 2561.0], [18.7, 2569.0], [18.8, 2569.0], [18.9, 2571.0], [19.0, 2571.0], [19.1, 2574.0], [19.2, 2575.0], [19.3, 2583.0], [19.4, 2584.0], [19.5, 2587.0], [19.6, 2591.0], [19.7, 2591.0], [19.8, 2595.0], [19.9, 2596.0], [20.0, 2597.0], [20.1, 2599.0], [20.2, 2602.0], [20.3, 2606.0], [20.4, 2607.0], [20.5, 2609.0], [20.6, 2614.0], [20.7, 2614.0], [20.8, 2616.0], [20.9, 2618.0], [21.0, 2624.0], [21.1, 2626.0], [21.2, 2629.0], [21.3, 2631.0], [21.4, 2631.0], [21.5, 2631.0], [21.6, 2635.0], [21.7, 2636.0], [21.8, 2640.0], [21.9, 2642.0], [22.0, 2643.0], [22.1, 2645.0], [22.2, 2647.0], [22.3, 2649.0], [22.4, 2652.0], [22.5, 2653.0], [22.6, 2657.0], [22.7, 2660.0], [22.8, 2663.0], [22.9, 2664.0], [23.0, 2666.0], [23.1, 2670.0], [23.2, 2676.0], [23.3, 2679.0], [23.4, 2679.0], [23.5, 2680.0], [23.6, 2684.0], [23.7, 2686.0], [23.8, 2689.0], [23.9, 2690.0], [24.0, 2693.0], [24.1, 2696.0], [24.2, 2698.0], [24.3, 2701.0], [24.4, 2704.0], [24.5, 2706.0], [24.6, 2710.0], [24.7, 2711.0], [24.8, 2713.0], [24.9, 2715.0], [25.0, 2716.0], [25.1, 2721.0], [25.2, 2723.0], [25.3, 2725.0], [25.4, 2731.0], [25.5, 2734.0], [25.6, 2736.0], [25.7, 2739.0], [25.8, 2741.0], [25.9, 2741.0], [26.0, 2742.0], [26.1, 2743.0], [26.2, 2744.0], [26.3, 2749.0], [26.4, 2752.0], [26.5, 2759.0], [26.6, 2763.0], [26.7, 2766.0], [26.8, 2769.0], [26.9, 2770.0], [27.0, 2771.0], [27.1, 2774.0], [27.2, 2777.0], [27.3, 2783.0], [27.4, 2786.0], [27.5, 2789.0], [27.6, 2791.0], [27.7, 2792.0], [27.8, 2794.0], [27.9, 2794.0], [28.0, 2795.0], [28.1, 2797.0], [28.2, 2798.0], [28.3, 2803.0], [28.4, 2804.0], [28.5, 2805.0], [28.6, 2807.0], [28.7, 2810.0], [28.8, 2813.0], [28.9, 2817.0], [29.0, 2821.0], [29.1, 2824.0], [29.2, 2826.0], [29.3, 2832.0], [29.4, 2833.0], [29.5, 2835.0], [29.6, 2835.0], [29.7, 2836.0], [29.8, 2838.0], [29.9, 2839.0], [30.0, 2842.0], [30.1, 2846.0], [30.2, 2849.0], [30.3, 2851.0], [30.4, 2853.0], [30.5, 2856.0], [30.6, 2859.0], [30.7, 2861.0], [30.8, 2862.0], [30.9, 2862.0], [31.0, 2863.0], [31.1, 2864.0], [31.2, 2864.0], [31.3, 2868.0], [31.4, 2869.0], [31.5, 2870.0], [31.6, 2872.0], [31.7, 2872.0], [31.8, 2874.0], [31.9, 2875.0], [32.0, 2875.0], [32.1, 2877.0], [32.2, 2880.0], [32.3, 2882.0], [32.4, 2884.0], [32.5, 2886.0], [32.6, 2887.0], [32.7, 2889.0], [32.8, 2891.0], [32.9, 2891.0], [33.0, 2894.0], [33.1, 2896.0], [33.2, 2899.0], [33.3, 2900.0], [33.4, 2902.0], [33.5, 2906.0], [33.6, 2910.0], [33.7, 2911.0], [33.8, 2912.0], [33.9, 2914.0], [34.0, 2916.0], [34.1, 2918.0], [34.2, 2920.0], [34.3, 2922.0], [34.4, 2924.0], [34.5, 2924.0], [34.6, 2928.0], [34.7, 2929.0], [34.8, 2931.0], [34.9, 2932.0], [35.0, 2934.0], [35.1, 2936.0], [35.2, 2937.0], [35.3, 2940.0], [35.4, 2941.0], [35.5, 2942.0], [35.6, 2943.0], [35.7, 2944.0], [35.8, 2947.0], [35.9, 2949.0], [36.0, 2949.0], [36.1, 2951.0], [36.2, 2956.0], [36.3, 2958.0], [36.4, 2960.0], [36.5, 2960.0], [36.6, 2962.0], [36.7, 2963.0], [36.8, 2963.0], [36.9, 2964.0], [37.0, 2966.0], [37.1, 2971.0], [37.2, 2973.0], [37.3, 2980.0], [37.4, 2982.0], [37.5, 2986.0], [37.6, 2988.0], [37.7, 2988.0], [37.8, 2991.0], [37.9, 2992.0], [38.0, 2994.0], [38.1, 2996.0], [38.2, 2997.0], [38.3, 3000.0], [38.4, 3003.0], [38.5, 3007.0], [38.6, 3008.0], [38.7, 3009.0], [38.8, 3011.0], [38.9, 3012.0], [39.0, 3015.0], [39.1, 3017.0], [39.2, 3020.0], [39.3, 3024.0], [39.4, 3028.0], [39.5, 3029.0], [39.6, 3030.0], [39.7, 3033.0], [39.8, 3035.0], [39.9, 3037.0], [40.0, 3038.0], [40.1, 3039.0], [40.2, 3041.0], [40.3, 3042.0], [40.4, 3043.0], [40.5, 3044.0], [40.6, 3045.0], [40.7, 3047.0], [40.8, 3049.0], [40.9, 3051.0], [41.0, 3051.0], [41.1, 3052.0], [41.2, 3056.0], [41.3, 3057.0], [41.4, 3059.0], [41.5, 3064.0], [41.6, 3066.0], [41.7, 3068.0], [41.8, 3070.0], [41.9, 3071.0], [42.0, 3075.0], [42.1, 3078.0], [42.2, 3079.0], [42.3, 3083.0], [42.4, 3084.0], [42.5, 3087.0], [42.6, 3087.0], [42.7, 3088.0], [42.8, 3092.0], [42.9, 3092.0], [43.0, 3094.0], [43.1, 3094.0], [43.2, 3096.0], [43.3, 3099.0], [43.4, 3103.0], [43.5, 3105.0], [43.6, 3107.0], [43.7, 3109.0], [43.8, 3113.0], [43.9, 3113.0], [44.0, 3116.0], [44.1, 3117.0], [44.2, 3118.0], [44.3, 3123.0], [44.4, 3126.0], [44.5, 3129.0], [44.6, 3131.0], [44.7, 3132.0], [44.8, 3135.0], [44.9, 3136.0], [45.0, 3137.0], [45.1, 3139.0], [45.2, 3139.0], [45.3, 3141.0], [45.4, 3144.0], [45.5, 3149.0], [45.6, 3151.0], [45.7, 3152.0], [45.8, 3155.0], [45.9, 3156.0], [46.0, 3160.0], [46.1, 3160.0], [46.2, 3161.0], [46.3, 3164.0], [46.4, 3164.0], [46.5, 3167.0], [46.6, 3169.0], [46.7, 3173.0], [46.8, 3175.0], [46.9, 3175.0], [47.0, 3178.0], [47.1, 3179.0], [47.2, 3181.0], [47.3, 3186.0], [47.4, 3188.0], [47.5, 3190.0], [47.6, 3193.0], [47.7, 3197.0], [47.8, 3200.0], [47.9, 3203.0], [48.0, 3206.0], [48.1, 3207.0], [48.2, 3208.0], [48.3, 3210.0], [48.4, 3210.0], [48.5, 3212.0], [48.6, 3212.0], [48.7, 3214.0], [48.8, 3215.0], [48.9, 3219.0], [49.0, 3224.0], [49.1, 3224.0], [49.2, 3226.0], [49.3, 3229.0], [49.4, 3230.0], [49.5, 3233.0], [49.6, 3235.0], [49.7, 3237.0], [49.8, 3240.0], [49.9, 3243.0], [50.0, 3245.0], [50.1, 3247.0], [50.2, 3248.0], [50.3, 3250.0], [50.4, 3252.0], [50.5, 3254.0], [50.6, 3255.0], [50.7, 3256.0], [50.8, 3258.0], [50.9, 3260.0], [51.0, 3266.0], [51.1, 3266.0], [51.2, 3267.0], [51.3, 3270.0], [51.4, 3271.0], [51.5, 3274.0], [51.6, 3279.0], [51.7, 3281.0], [51.8, 3283.0], [51.9, 3284.0], [52.0, 3284.0], [52.1, 3286.0], [52.2, 3287.0], [52.3, 3289.0], [52.4, 3291.0], [52.5, 3292.0], [52.6, 3295.0], [52.7, 3296.0], [52.8, 3298.0], [52.9, 3298.0], [53.0, 3299.0], [53.1, 3302.0], [53.2, 3304.0], [53.3, 3305.0], [53.4, 3306.0], [53.5, 3307.0], [53.6, 3308.0], [53.7, 3308.0], [53.8, 3311.0], [53.9, 3312.0], [54.0, 3317.0], [54.1, 3318.0], [54.2, 3320.0], [54.3, 3322.0], [54.4, 3322.0], [54.5, 3327.0], [54.6, 3329.0], [54.7, 3333.0], [54.8, 3334.0], [54.9, 3335.0], [55.0, 3337.0], [55.1, 3338.0], [55.2, 3339.0], [55.3, 3343.0], [55.4, 3346.0], [55.5, 3349.0], [55.6, 3353.0], [55.7, 3355.0], [55.8, 3356.0], [55.9, 3358.0], [56.0, 3361.0], [56.1, 3362.0], [56.2, 3365.0], [56.3, 3369.0], [56.4, 3370.0], [56.5, 3371.0], [56.6, 3372.0], [56.7, 3374.0], [56.8, 3378.0], [56.9, 3380.0], [57.0, 3384.0], [57.1, 3385.0], [57.2, 3388.0], [57.3, 3391.0], [57.4, 3392.0], [57.5, 3397.0], [57.6, 3399.0], [57.7, 3402.0], [57.8, 3404.0], [57.9, 3405.0], [58.0, 3407.0], [58.1, 3407.0], [58.2, 3408.0], [58.3, 3411.0], [58.4, 3412.0], [58.5, 3415.0], [58.6, 3416.0], [58.7, 3418.0], [58.8, 3421.0], [58.9, 3423.0], [59.0, 3427.0], [59.1, 3431.0], [59.2, 3432.0], [59.3, 3433.0], [59.4, 3434.0], [59.5, 3434.0], [59.6, 3436.0], [59.7, 3437.0], [59.8, 3440.0], [59.9, 3441.0], [60.0, 3442.0], [60.1, 3443.0], [60.2, 3444.0], [60.3, 3445.0], [60.4, 3446.0], [60.5, 3449.0], [60.6, 3451.0], [60.7, 3453.0], [60.8, 3454.0], [60.9, 3455.0], [61.0, 3458.0], [61.1, 3459.0], [61.2, 3460.0], [61.3, 3462.0], [61.4, 3463.0], [61.5, 3467.0], [61.6, 3469.0], [61.7, 3471.0], [61.8, 3474.0], [61.9, 3476.0], [62.0, 3481.0], [62.1, 3484.0], [62.2, 3486.0], [62.3, 3490.0], [62.4, 3491.0], [62.5, 3493.0], [62.6, 3493.0], [62.7, 3500.0], [62.8, 3503.0], [62.9, 3504.0], [63.0, 3505.0], [63.1, 3506.0], [63.2, 3508.0], [63.3, 3513.0], [63.4, 3514.0], [63.5, 3523.0], [63.6, 3524.0], [63.7, 3527.0], [63.8, 3529.0], [63.9, 3531.0], [64.0, 3536.0], [64.1, 3537.0], [64.2, 3538.0], [64.3, 3544.0], [64.4, 3548.0], [64.5, 3552.0], [64.6, 3556.0], [64.7, 3558.0], [64.8, 3563.0], [64.9, 3564.0], [65.0, 3565.0], [65.1, 3571.0], [65.2, 3572.0], [65.3, 3575.0], [65.4, 3583.0], [65.5, 3584.0], [65.6, 3585.0], [65.7, 3588.0], [65.8, 3594.0], [65.9, 3597.0], [66.0, 3597.0], [66.1, 3599.0], [66.2, 3604.0], [66.3, 3607.0], [66.4, 3611.0], [66.5, 3616.0], [66.6, 3619.0], [66.7, 3621.0], [66.8, 3629.0], [66.9, 3633.0], [67.0, 3636.0], [67.1, 3643.0], [67.2, 3646.0], [67.3, 3650.0], [67.4, 3653.0], [67.5, 3656.0], [67.6, 3659.0], [67.7, 3668.0], [67.8, 3674.0], [67.9, 3674.0], [68.0, 3679.0], [68.1, 3679.0], [68.2, 3682.0], [68.3, 3686.0], [68.4, 3686.0], [68.5, 3694.0], [68.6, 3696.0], [68.7, 3697.0], [68.8, 3700.0], [68.9, 3701.0], [69.0, 3704.0], [69.1, 3709.0], [69.2, 3709.0], [69.3, 3711.0], [69.4, 3716.0], [69.5, 3717.0], [69.6, 3720.0], [69.7, 3723.0], [69.8, 3730.0], [69.9, 3733.0], [70.0, 3735.0], [70.1, 3740.0], [70.2, 3742.0], [70.3, 3744.0], [70.4, 3746.0], [70.5, 3751.0], [70.6, 3755.0], [70.7, 3759.0], [70.8, 3762.0], [70.9, 3764.0], [71.0, 3765.0], [71.1, 3767.0], [71.2, 3770.0], [71.3, 3773.0], [71.4, 3777.0], [71.5, 3779.0], [71.6, 3794.0], [71.7, 3795.0], [71.8, 3800.0], [71.9, 3800.0], [72.0, 3802.0], [72.1, 3812.0], [72.2, 3813.0], [72.3, 3814.0], [72.4, 3816.0], [72.5, 3820.0], [72.6, 3824.0], [72.7, 3834.0], [72.8, 3840.0], [72.9, 3841.0], [73.0, 3842.0], [73.1, 3844.0], [73.2, 3848.0], [73.3, 3849.0], [73.4, 3860.0], [73.5, 3861.0], [73.6, 3865.0], [73.7, 3867.0], [73.8, 3869.0], [73.9, 3870.0], [74.0, 3875.0], [74.1, 3879.0], [74.2, 3882.0], [74.3, 3884.0], [74.4, 3887.0], [74.5, 3890.0], [74.6, 3891.0], [74.7, 3895.0], [74.8, 3898.0], [74.9, 3902.0], [75.0, 3904.0], [75.1, 3908.0], [75.2, 3912.0], [75.3, 3927.0], [75.4, 3934.0], [75.5, 3942.0], [75.6, 3951.0], [75.7, 3954.0], [75.8, 3960.0], [75.9, 3966.0], [76.0, 3974.0], [76.1, 3979.0], [76.2, 3981.0], [76.3, 3986.0], [76.4, 3989.0], [76.5, 3992.0], [76.6, 3996.0], [76.7, 3996.0], [76.8, 4000.0], [76.9, 4004.0], [77.0, 4006.0], [77.1, 4020.0], [77.2, 4022.0], [77.3, 4025.0], [77.4, 4026.0], [77.5, 4034.0], [77.6, 4038.0], [77.7, 4040.0], [77.8, 4045.0], [77.9, 4049.0], [78.0, 4050.0], [78.1, 4053.0], [78.2, 4056.0], [78.3, 4060.0], [78.4, 4063.0], [78.5, 4067.0], [78.6, 4085.0], [78.7, 4088.0], [78.8, 4099.0], [78.9, 4106.0], [79.0, 4107.0], [79.1, 4114.0], [79.2, 4121.0], [79.3, 4128.0], [79.4, 4133.0], [79.5, 4138.0], [79.6, 4149.0], [79.7, 4152.0], [79.8, 4165.0], [79.9, 4178.0], [80.0, 4186.0], [80.1, 4202.0], [80.2, 4205.0], [80.3, 4217.0], [80.4, 4224.0], [80.5, 4232.0], [80.6, 4242.0], [80.7, 4252.0], [80.8, 4258.0], [80.9, 4260.0], [81.0, 4275.0], [81.1, 4291.0], [81.2, 4293.0], [81.3, 4307.0], [81.4, 4313.0], [81.5, 4316.0], [81.6, 4318.0], [81.7, 4319.0], [81.8, 4326.0], [81.9, 4332.0], [82.0, 4341.0], [82.1, 4346.0], [82.2, 4348.0], [82.3, 4360.0], [82.4, 4362.0], [82.5, 4365.0], [82.6, 4373.0], [82.7, 4381.0], [82.8, 4386.0], [82.9, 4388.0], [83.0, 4389.0], [83.1, 4400.0], [83.2, 4401.0], [83.3, 4415.0], [83.4, 4423.0], [83.5, 4430.0], [83.6, 4442.0], [83.7, 4449.0], [83.8, 4456.0], [83.9, 4459.0], [84.0, 4464.0], [84.1, 4468.0], [84.2, 4470.0], [84.3, 4478.0], [84.4, 4479.0], [84.5, 4481.0], [84.6, 4495.0], [84.7, 4501.0], [84.8, 4509.0], [84.9, 4515.0], [85.0, 4526.0], [85.1, 4537.0], [85.2, 4544.0], [85.3, 4550.0], [85.4, 4555.0], [85.5, 4564.0], [85.6, 4570.0], [85.7, 4574.0], [85.8, 4578.0], [85.9, 4580.0], [86.0, 4586.0], [86.1, 4597.0], [86.2, 4609.0], [86.3, 4622.0], [86.4, 4626.0], [86.5, 4645.0], [86.6, 4650.0], [86.7, 4658.0], [86.8, 4670.0], [86.9, 4674.0], [87.0, 4679.0], [87.1, 4685.0], [87.2, 4692.0], [87.3, 4703.0], [87.4, 4705.0], [87.5, 4720.0], [87.6, 4728.0], [87.7, 4737.0], [87.8, 4746.0], [87.9, 4759.0], [88.0, 4762.0], [88.1, 4770.0], [88.2, 4776.0], [88.3, 4783.0], [88.4, 4792.0], [88.5, 4803.0], [88.6, 4810.0], [88.7, 4816.0], [88.8, 4823.0], [88.9, 4824.0], [89.0, 4826.0], [89.1, 4830.0], [89.2, 4832.0], [89.3, 4840.0], [89.4, 4841.0], [89.5, 4847.0], [89.6, 4848.0], [89.7, 4863.0], [89.8, 4877.0], [89.9, 4888.0], [90.0, 4888.0], [90.1, 4893.0], [90.2, 4894.0], [90.3, 4932.0], [90.4, 4940.0], [90.5, 4942.0], [90.6, 4950.0], [90.7, 4955.0], [90.8, 4961.0], [90.9, 4963.0], [91.0, 4964.0], [91.1, 4971.0], [91.2, 4974.0], [91.3, 4983.0], [91.4, 4999.0], [91.5, 5012.0], [91.6, 5024.0], [91.7, 5029.0], [91.8, 5036.0], [91.9, 5062.0], [92.0, 5079.0], [92.1, 5090.0], [92.2, 5103.0], [92.3, 5116.0], [92.4, 5118.0], [92.5, 5120.0], [92.6, 5140.0], [92.7, 5149.0], [92.8, 5167.0], [92.9, 5182.0], [93.0, 5199.0], [93.1, 5246.0], [93.2, 5250.0], [93.3, 5256.0], [93.4, 5286.0], [93.5, 5293.0], [93.6, 5296.0], [93.7, 5300.0], [93.8, 5304.0], [93.9, 5315.0], [94.0, 5320.0], [94.1, 5327.0], [94.2, 5339.0], [94.3, 5369.0], [94.4, 5390.0], [94.5, 5416.0], [94.6, 5443.0], [94.7, 5457.0], [94.8, 5495.0], [94.9, 5509.0], [95.0, 5526.0], [95.1, 5547.0], [95.2, 5562.0], [95.3, 5601.0], [95.4, 5623.0], [95.5, 5633.0], [95.6, 5645.0], [95.7, 5658.0], [95.8, 5666.0], [95.9, 5702.0], [96.0, 5714.0], [96.1, 5741.0], [96.2, 5750.0], [96.3, 5809.0], [96.4, 5814.0], [96.5, 5825.0], [96.6, 5848.0], [96.7, 5861.0], [96.8, 5868.0], [96.9, 5898.0], [97.0, 5901.0], [97.1, 5927.0], [97.2, 5938.0], [97.3, 5955.0], [97.4, 5980.0], [97.5, 6018.0], [97.6, 6071.0], [97.7, 6106.0], [97.8, 6171.0], [97.9, 6193.0], [98.0, 6261.0], [98.1, 6320.0], [98.2, 6361.0], [98.3, 6428.0], [98.4, 6499.0], [98.5, 6541.0], [98.6, 6600.0], [98.7, 6616.0], [98.8, 6629.0], [98.9, 6661.0], [99.0, 6706.0], [99.1, 6750.0], [99.2, 6769.0], [99.3, 6821.0], [99.4, 6845.0], [99.5, 6909.0], [99.6, 6936.0], [99.7, 6966.0], [99.8, 7101.0], [99.9, 7127.0], [100.0, 7545.0]], "isOverall": false, "label": "ActivateProductSampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 127.0, "series": [{"data": [[900.0, 4.0], [1000.0, 7.0], [1100.0, 17.0], [1200.0, 7.0], [1300.0, 4.0], [1400.0, 10.0], [1500.0, 11.0], [1600.0, 11.0], [1700.0, 9.0], [1800.0, 16.0], [1900.0, 29.0], [2000.0, 34.0], [2100.0, 43.0], [2200.0, 44.0], [2300.0, 74.0], [2400.0, 82.0], [2500.0, 81.0], [2600.0, 100.0], [2800.0, 119.0], [2700.0, 95.0], [2900.0, 122.0], [3000.0, 121.0], [3100.0, 106.0], [3300.0, 110.0], [3200.0, 127.0], [3400.0, 121.0], [3500.0, 83.0], [3700.0, 71.0], [3600.0, 64.0], [3800.0, 74.0], [3900.0, 47.0], [4000.0, 49.0], [4100.0, 29.0], [4200.0, 30.0], [4300.0, 43.0], [4400.0, 37.0], [4500.0, 36.0], [4600.0, 28.0], [4700.0, 28.0], [4800.0, 42.0], [4900.0, 29.0], [5000.0, 18.0], [5100.0, 20.0], [5200.0, 16.0], [5300.0, 19.0], [5500.0, 10.0], [5600.0, 14.0], [5400.0, 10.0], [5700.0, 10.0], [5800.0, 16.0], [5900.0, 12.0], [6100.0, 6.0], [6000.0, 5.0], [6300.0, 4.0], [6200.0, 4.0], [6400.0, 4.0], [6500.0, 4.0], [6600.0, 9.0], [6900.0, 7.0], [6700.0, 8.0], [6800.0, 4.0], [7100.0, 3.0], [7000.0, 1.0], [7200.0, 1.0], [7500.0, 1.0]], "isOverall": false, "label": "ActivateProductSampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 49.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2351.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2351.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.577196087E12, "maxY": 160.0, "series": [{"data": [[1.577196124E12, 160.0], [1.577196128E12, 160.0], [1.577196126E12, 160.0], [1.57719612E12, 160.0], [1.577196118E12, 160.0], [1.577196122E12, 160.0], [1.577196093E12, 160.0], [1.577196136E12, 126.0857142857143], [1.577196091E12, 160.0], [1.577196134E12, 151.64444444444445], [1.577196095E12, 160.0], [1.577196138E12, 49.05405405405404], [1.577196087E12, 160.0], [1.57719613E12, 160.0], [1.577196089E12, 160.0], [1.577196132E12, 160.0], [1.577196103E12, 160.0], [1.577196105E12, 160.0], [1.577196097E12, 160.0], [1.57719614E12, 2.0], [1.577196101E12, 160.0], [1.577196099E12, 160.0], [1.577196113E12, 160.0], [1.577196115E12, 160.0], [1.577196109E12, 160.0], [1.577196107E12, 160.0], [1.577196111E12, 160.0], [1.577196125E12, 160.0], [1.577196123E12, 160.0], [1.577196127E12, 160.0], [1.577196119E12, 160.0], [1.577196121E12, 160.0], [1.577196135E12, 139.31481481481475], [1.577196092E12, 160.0], [1.577196096E12, 160.0], [1.577196094E12, 160.0], [1.577196137E12, 100.43209876543209], [1.577196088E12, 160.0], [1.577196129E12, 160.0], [1.57719609E12, 160.0], [1.577196133E12, 158.42553191489367], [1.577196131E12, 160.0], [1.577196104E12, 160.0], [1.577196102E12, 160.0], [1.577196106E12, 160.0], [1.577196098E12, 160.0], [1.577196139E12, 11.470588235294118], [1.5771961E12, 160.0], [1.577196114E12, 160.0], [1.577196116E12, 160.0], [1.577196108E12, 160.0], [1.577196112E12, 160.0], [1.57719611E12, 160.0]], "isOverall": false, "label": "ActivateProduct", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57719614E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 905.0, "minX": 1.0, "maxY": 4705.0, "series": [{"data": [[2.0, 1084.0], [3.0, 957.0], [4.0, 1094.0], [5.0, 1246.0], [6.0, 905.0], [7.0, 1071.0], [8.0, 1166.0], [10.0, 1132.0], [11.0, 1136.0], [12.0, 1154.0], [13.0, 1161.0], [14.0, 1155.0], [15.0, 1085.0], [16.0, 1076.0], [17.0, 1047.0], [18.0, 1188.0], [19.0, 1124.0], [20.0, 1181.0], [21.0, 1026.0], [22.0, 1238.0], [23.0, 1184.0], [24.0, 1217.0], [25.0, 1212.0], [26.0, 1132.0], [27.0, 1281.0], [28.0, 1251.0], [29.0, 1456.0], [30.0, 1492.0], [31.0, 1276.0], [33.0, 1563.0], [32.0, 1463.0], [35.0, 1330.0], [34.0, 1219.0], [37.0, 1436.0], [36.0, 1510.0], [39.0, 1496.0], [38.0, 1160.0], [40.0, 1505.0], [43.0, 1474.0], [42.0, 1585.5], [45.0, 1685.0], [44.0, 1466.0], [47.0, 1898.0], [46.0, 1670.0], [49.0, 1921.0], [48.0, 1647.0], [51.0, 1716.3333333333333], [53.0, 1582.0], [52.0, 1822.0], [55.0, 2138.6666666666665], [54.0, 1780.0], [57.0, 2916.0], [56.0, 1683.5], [59.0, 1582.0], [58.0, 2964.0], [61.0, 1630.0], [60.0, 1537.0], [63.0, 2431.0], [62.0, 1797.0], [67.0, 2376.5], [66.0, 2247.0], [65.0, 2441.0], [64.0, 2744.0], [70.0, 1546.0], [69.0, 2675.0], [68.0, 2832.0], [75.0, 2342.0], [74.0, 2895.5], [73.0, 1610.0], [72.0, 2219.0], [79.0, 2446.0], [78.0, 2270.3333333333335], [77.0, 2400.0], [76.0, 2223.0], [83.0, 2870.5], [82.0, 3453.0], [81.0, 2690.5], [80.0, 1772.0], [87.0, 3189.0], [86.0, 1897.0], [85.0, 3442.0], [84.0, 1979.0], [91.0, 2275.0], [90.0, 2513.0], [89.0, 2644.5], [88.0, 3254.5], [94.0, 2888.5], [93.0, 2932.3333333333335], [92.0, 2330.0], [99.0, 3597.0], [98.0, 2505.5], [96.0, 2023.3333333333333], [103.0, 4705.0], [102.0, 3444.0], [101.0, 3035.0], [100.0, 3602.0], [107.0, 3311.0], [106.0, 3457.0], [105.0, 3726.0], [104.0, 3337.0], [111.0, 3340.2], [110.0, 2552.5], [109.0, 3086.0], [108.0, 3137.0], [115.0, 3207.3333333333335], [114.0, 2607.0], [113.0, 3326.6666666666665], [112.0, 2574.0], [119.0, 3279.0], [118.0, 3329.0], [117.0, 2889.0], [116.0, 2714.0], [123.0, 3263.5], [122.0, 3718.0], [121.0, 3899.3333333333335], [120.0, 3685.6666666666665], [127.0, 3484.3333333333335], [126.0, 3810.7272727272725], [125.0, 3296.0], [124.0, 3471.5], [135.0, 3432.1111111111113], [134.0, 3131.0], [133.0, 3438.6666666666665], [132.0, 3407.0], [131.0, 3679.0], [130.0, 3241.8], [129.0, 2770.0], [128.0, 3066.0], [143.0, 3657.3333333333335], [142.0, 3116.5], [141.0, 3062.8571428571427], [140.0, 3354.5], [139.0, 4275.0], [138.0, 3331.5], [137.0, 3948.5], [136.0, 2784.6666666666665], [151.0, 3177.8], [150.0, 3111.75], [149.0, 3865.666666666667], [148.0, 3516.0], [147.0, 2811.0], [146.0, 2811.6666666666665], [145.0, 2955.3333333333335], [144.0, 3004.5], [159.0, 3329.9677419354834], [158.0, 3163.5], [157.0, 2828.222222222222], [156.0, 2947.1999999999994], [155.0, 2767.0], [154.0, 3001.3333333333335], [153.0, 3374.5], [152.0, 2877.6], [160.0, 3523.549144254281], [1.0, 948.0]], "isOverall": false, "label": "ActivateProductSampler", "isController": false}, {"data": [[152.10583333333344, 3415.002500000003]], "isOverall": false, "label": "ActivateProductSampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 160.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2100.0, "minX": 1.577196087E12, "maxY": 62532.0, "series": [{"data": [[1.577196124E12, 20072.0], [1.577196128E12, 31652.0], [1.577196126E12, 59444.0], [1.57719612E12, 51724.0], [1.577196118E12, 13896.0], [1.577196122E12, 43232.0], [1.577196093E12, 30880.0], [1.577196136E12, 27020.0], [1.577196091E12, 15440.0], [1.577196134E12, 34740.0], [1.577196095E12, 47092.0], [1.577196138E12, 57128.0], [1.577196087E12, 3088.0], [1.57719613E12, 37828.0], [1.577196089E12, 10036.0], [1.577196132E12, 48636.0], [1.577196103E12, 33968.0], [1.577196105E12, 44004.0], [1.577196097E12, 39372.0], [1.57719614E12, 3088.0], [1.577196101E12, 49408.0], [1.577196099E12, 48636.0], [1.577196113E12, 25476.0], [1.577196115E12, 47864.0], [1.577196109E12, 47864.0], [1.577196107E12, 40916.0], [1.577196111E12, 37828.0], [1.577196125E12, 36284.0], [1.577196123E12, 40916.0], [1.577196127E12, 27020.0], [1.577196119E12, 37828.0], [1.577196121E12, 38600.0], [1.577196135E12, 41688.0], [1.577196092E12, 46320.0], [1.577196096E12, 24704.0], [1.577196094E12, 24704.0], [1.577196137E12, 62532.0], [1.577196088E12, 6948.0], [1.577196129E12, 43232.0], [1.57719609E12, 30880.0], [1.577196133E12, 36284.0], [1.577196131E12, 30108.0], [1.577196104E12, 39372.0], [1.577196102E12, 40916.0], [1.577196106E12, 41688.0], [1.577196098E12, 24704.0], [1.577196139E12, 13124.0], [1.5771961E12, 34740.0], [1.577196114E12, 50180.0], [1.577196116E12, 15440.0], [1.577196108E12, 36284.0], [1.577196112E12, 49408.0], [1.57719611E12, 28564.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.577196124E12, 13650.0], [1.577196128E12, 21525.0], [1.577196126E12, 40425.0], [1.57719612E12, 35175.0], [1.577196118E12, 9450.0], [1.577196122E12, 29400.0], [1.577196093E12, 21000.0], [1.577196136E12, 18375.0], [1.577196091E12, 10500.0], [1.577196134E12, 23625.0], [1.577196095E12, 32025.0], [1.577196138E12, 38850.0], [1.577196087E12, 2100.0], [1.57719613E12, 25725.0], [1.577196089E12, 6825.0], [1.577196132E12, 33075.0], [1.577196103E12, 23100.0], [1.577196105E12, 29925.0], [1.577196097E12, 26775.0], [1.57719614E12, 2100.0], [1.577196101E12, 33600.0], [1.577196099E12, 33075.0], [1.577196113E12, 17325.0], [1.577196115E12, 32550.0], [1.577196109E12, 32550.0], [1.577196107E12, 27825.0], [1.577196111E12, 25725.0], [1.577196125E12, 24675.0], [1.577196123E12, 27825.0], [1.577196127E12, 18375.0], [1.577196119E12, 25725.0], [1.577196121E12, 26250.0], [1.577196135E12, 28350.0], [1.577196092E12, 31500.0], [1.577196096E12, 16800.0], [1.577196094E12, 16800.0], [1.577196137E12, 42525.0], [1.577196088E12, 4725.0], [1.577196129E12, 29400.0], [1.57719609E12, 21000.0], [1.577196133E12, 24675.0], [1.577196131E12, 20475.0], [1.577196104E12, 26775.0], [1.577196102E12, 27825.0], [1.577196106E12, 28350.0], [1.577196098E12, 16800.0], [1.577196139E12, 8925.0], [1.5771961E12, 23625.0], [1.577196114E12, 34125.0], [1.577196116E12, 10500.0], [1.577196108E12, 24675.0], [1.577196112E12, 33600.0], [1.57719611E12, 19425.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57719614E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1018.25, "minX": 1.577196087E12, "maxY": 5690.083333333333, "series": [{"data": [[1.577196124E12, 3395.6153846153843], [1.577196128E12, 3224.8292682926826], [1.577196126E12, 3438.4025974025976], [1.57719612E12, 5145.417910447761], [1.577196118E12, 4887.6111111111095], [1.577196122E12, 2982.625000000001], [1.577196093E12, 5424.024999999999], [1.577196136E12, 3495.1999999999994], [1.577196091E12, 5127.95], [1.577196134E12, 3193.355555555556], [1.577196095E12, 3748.327868852459], [1.577196138E12, 1810.7972972972973], [1.577196087E12, 1946.5], [1.57719613E12, 3412.306122448979], [1.577196089E12, 3623.538461538462], [1.577196132E12, 3288.9523809523807], [1.577196103E12, 2957.1136363636365], [1.577196105E12, 3111.0877192982457], [1.577196097E12, 3746.333333333334], [1.57719614E12, 1018.25], [1.577196101E12, 3005.515625], [1.577196099E12, 3562.063492063493], [1.577196113E12, 3205.3030303030305], [1.577196115E12, 3025.25806451613], [1.577196109E12, 3122.6612903225805], [1.577196107E12, 2967.3962264150946], [1.577196111E12, 3244.632653061225], [1.577196125E12, 3291.255319148937], [1.577196123E12, 2905.622641509434], [1.577196127E12, 3006.6], [1.577196119E12, 4929.469387755102], [1.577196121E12, 3916.72], [1.577196135E12, 3247.129629629629], [1.577196092E12, 5690.083333333333], [1.577196096E12, 3533.499999999999], [1.577196094E12, 3861.6875], [1.577196137E12, 3059.95061728395], [1.577196088E12, 2856.1111111111113], [1.577196129E12, 3158.732142857143], [1.57719609E12, 4417.0], [1.577196133E12, 3193.255319148936], [1.577196131E12, 3213.8461538461534], [1.577196104E12, 3021.8627450980393], [1.577196102E12, 3049.1132075471696], [1.577196106E12, 3081.5740740740735], [1.577196098E12, 3572.03125], [1.577196139E12, 1116.7647058823532], [1.5771961E12, 3594.6], [1.577196114E12, 2984.538461538461], [1.577196116E12, 3333.4000000000005], [1.577196108E12, 3111.553191489362], [1.577196112E12, 3248.7187499999995], [1.57719611E12, 3019.162162162162]], "isOverall": false, "label": "ActivateProductSampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57719614E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1018.25, "minX": 1.577196087E12, "maxY": 5690.083333333333, "series": [{"data": [[1.577196124E12, 3395.6153846153843], [1.577196128E12, 3224.8292682926826], [1.577196126E12, 3438.3896103896104], [1.57719612E12, 5145.388059701492], [1.577196118E12, 4887.6111111111095], [1.577196122E12, 2982.625000000001], [1.577196093E12, 5424.024999999999], [1.577196136E12, 3495.1999999999994], [1.577196091E12, 5127.95], [1.577196134E12, 3193.355555555556], [1.577196095E12, 3748.327868852459], [1.577196138E12, 1810.7972972972973], [1.577196087E12, 1946.5], [1.57719613E12, 3412.285714285714], [1.577196089E12, 3623.461538461538], [1.577196132E12, 3288.9523809523807], [1.577196103E12, 2957.0909090909095], [1.577196105E12, 3111.0877192982457], [1.577196097E12, 3746.333333333334], [1.57719614E12, 1018.25], [1.577196101E12, 3005.515625], [1.577196099E12, 3562.063492063493], [1.577196113E12, 3205.3030303030305], [1.577196115E12, 3025.25806451613], [1.577196109E12, 3122.6612903225805], [1.577196107E12, 2967.3962264150946], [1.577196111E12, 3244.6122448979604], [1.577196125E12, 3291.2340425531925], [1.577196123E12, 2905.622641509434], [1.577196127E12, 3006.6], [1.577196119E12, 4929.448979591839], [1.577196121E12, 3916.72], [1.577196135E12, 3247.0925925925912], [1.577196092E12, 5690.083333333333], [1.577196096E12, 3533.499999999999], [1.577196094E12, 3861.6875], [1.577196137E12, 3059.95061728395], [1.577196088E12, 2856.1111111111113], [1.577196129E12, 3158.7142857142862], [1.57719609E12, 4417.0], [1.577196133E12, 3193.255319148936], [1.577196131E12, 3213.8461538461534], [1.577196104E12, 3021.8627450980393], [1.577196102E12, 3049.1132075471696], [1.577196106E12, 3081.5740740740735], [1.577196098E12, 3571.9999999999995], [1.577196139E12, 1116.7647058823532], [1.5771961E12, 3594.6], [1.577196114E12, 2984.538461538461], [1.577196116E12, 3333.4000000000005], [1.577196108E12, 3111.553191489362], [1.577196112E12, 3248.6718750000014], [1.57719611E12, 3019.135135135135]], "isOverall": false, "label": "ActivateProductSampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57719614E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 399.25, "minX": 1.577196087E12, "maxY": 425.5, "series": [{"data": [[1.577196124E12, 400.69230769230774], [1.577196128E12, 402.48780487804873], [1.577196126E12, 401.51948051948057], [1.57719612E12, 400.73134328358225], [1.577196118E12, 402.38888888888886], [1.577196122E12, 402.0535714285714], [1.577196093E12, 404.17500000000007], [1.577196136E12, 400.7714285714287], [1.577196091E12, 408.1000000000001], [1.577196134E12, 401.31111111111113], [1.577196095E12, 404.81967213114746], [1.577196138E12, 401.94594594594594], [1.577196087E12, 425.5], [1.57719613E12, 402.67346938775506], [1.577196089E12, 405.76923076923083], [1.577196132E12, 401.96825396825403], [1.577196103E12, 403.20454545454544], [1.577196105E12, 399.57894736842104], [1.577196097E12, 406.27450980392155], [1.57719614E12, 399.25], [1.577196101E12, 404.8749999999999], [1.577196099E12, 404.3650793650793], [1.577196113E12, 401.6969696969697], [1.577196115E12, 401.2419354838709], [1.577196109E12, 402.0806451612903], [1.577196107E12, 400.62264150943383], [1.577196111E12, 401.53061224489795], [1.577196125E12, 402.8510638297872], [1.577196123E12, 401.07547169811335], [1.577196127E12, 400.4], [1.577196119E12, 401.8367346938775], [1.577196121E12, 402.35999999999996], [1.577196135E12, 402.31481481481484], [1.577196092E12, 404.7333333333333], [1.577196096E12, 406.8125], [1.577196094E12, 403.125], [1.577196137E12, 400.91358024691357], [1.577196088E12, 418.55555555555554], [1.577196129E12, 403.39285714285717], [1.57719609E12, 406.02500000000003], [1.577196133E12, 402.14893617021283], [1.577196131E12, 400.58974358974365], [1.577196104E12, 402.70588235294133], [1.577196102E12, 403.62264150943395], [1.577196106E12, 400.14814814814815], [1.577196098E12, 402.75], [1.577196139E12, 400.5294117647059], [1.5771961E12, 408.68888888888875], [1.577196114E12, 402.21538461538466], [1.577196116E12, 403.05], [1.577196108E12, 400.659574468085], [1.577196112E12, 401.96875], [1.57719611E12, 401.51351351351354]], "isOverall": false, "label": "ActivateProductSampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57719614E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 905.0, "minX": 1.577196087E12, "maxY": 7545.0, "series": [{"data": [[1.577196124E12, 4964.0], [1.577196128E12, 5699.0], [1.577196126E12, 5028.0], [1.57719612E12, 6821.0], [1.577196118E12, 6273.0], [1.577196122E12, 6936.0], [1.577196093E12, 7127.0], [1.577196136E12, 4608.0], [1.577196091E12, 5812.0], [1.577196134E12, 4894.0], [1.577196095E12, 5659.0], [1.577196138E12, 3423.0], [1.577196087E12, 2030.0], [1.57719613E12, 4783.0], [1.577196089E12, 4146.0], [1.577196132E12, 4823.0], [1.577196103E12, 5023.0], [1.577196105E12, 4299.0], [1.577196097E12, 5580.0], [1.57719614E12, 1145.0], [1.577196101E12, 5327.0], [1.577196099E12, 5865.0], [1.577196113E12, 4293.0], [1.577196115E12, 4445.0], [1.577196109E12, 4720.0], [1.577196107E12, 4968.0], [1.577196111E12, 4346.0], [1.577196125E12, 4626.0], [1.577196123E12, 4222.0], [1.577196127E12, 4961.0], [1.577196119E12, 5899.0], [1.577196121E12, 6927.0], [1.577196135E12, 5362.0], [1.577196092E12, 6964.0], [1.577196096E12, 4821.0], [1.577196094E12, 7545.0], [1.577196137E12, 4841.0], [1.577196088E12, 3126.0], [1.577196129E12, 4787.0], [1.57719609E12, 5036.0], [1.577196133E12, 4959.0], [1.577196131E12, 4910.0], [1.577196104E12, 4848.0], [1.577196102E12, 5254.0], [1.577196106E12, 5300.0], [1.577196098E12, 5296.0], [1.577196139E12, 1246.0], [1.5771961E12, 5863.0], [1.577196114E12, 4322.0], [1.577196116E12, 5032.0], [1.577196108E12, 5287.0], [1.577196112E12, 5199.0], [1.57719611E12, 4367.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.577196124E12, 2112.0], [1.577196128E12, 1957.0], [1.577196126E12, 1914.0], [1.57719612E12, 2342.0], [1.577196118E12, 4362.0], [1.577196122E12, 1775.0], [1.577196093E12, 2742.0], [1.577196136E12, 2093.0], [1.577196091E12, 3150.0], [1.577196134E12, 2249.0], [1.577196095E12, 2127.0], [1.577196138E12, 1026.0], [1.577196087E12, 1824.0], [1.57719613E12, 2095.0], [1.577196089E12, 3044.0], [1.577196132E12, 1795.0], [1.577196103E12, 1967.0], [1.577196105E12, 1811.0], [1.577196097E12, 2019.0], [1.57719614E12, 948.0], [1.577196101E12, 1649.0], [1.577196099E12, 2036.0], [1.577196113E12, 2163.0], [1.577196115E12, 1900.0], [1.577196109E12, 1876.0], [1.577196107E12, 1830.0], [1.577196111E12, 2157.0], [1.577196125E12, 2048.0], [1.577196123E12, 2058.0], [1.577196127E12, 1981.0], [1.577196119E12, 3508.0], [1.577196121E12, 1342.0], [1.577196135E12, 2033.0], [1.577196092E12, 2553.0], [1.577196096E12, 2241.0], [1.577196094E12, 1829.0], [1.577196137E12, 1527.0], [1.577196088E12, 2211.0], [1.577196129E12, 2067.0], [1.57719609E12, 3720.0], [1.577196133E12, 2091.0], [1.577196131E12, 1788.0], [1.577196104E12, 1800.0], [1.577196102E12, 2050.0], [1.577196106E12, 1750.0], [1.577196098E12, 2408.0], [1.577196139E12, 905.0], [1.5771961E12, 1919.0], [1.577196114E12, 1633.0], [1.577196116E12, 2468.0], [1.577196108E12, 1986.0], [1.577196112E12, 2389.0], [1.57719611E12, 1667.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.577196124E12, 5238.299999999999], [1.577196128E12, 5113.2], [1.577196126E12, 5123.6], [1.57719612E12, 5243.799999999999], [1.577196118E12, 4930.200000000001], [1.577196122E12, 5288.200000000001], [1.577196093E12, 6709.0], [1.577196136E12, 4959.5], [1.577196091E12, 5263.4], [1.577196134E12, 4968.0], [1.577196095E12, 6613.0], [1.577196138E12, 4893.0], [1.577196087E12, 2030.0], [1.57719613E12, 5043.2], [1.577196089E12, 3816.3], [1.577196132E12, 5003.200000000001], [1.577196103E12, 5788.000000000002], [1.577196105E12, 5642.400000000001], [1.577196097E12, 6422.3], [1.57719614E12, 4888.9], [1.577196101E12, 5894.5], [1.577196099E12, 6080.599999999999], [1.577196113E12, 4992.000000000001], [1.577196115E12, 4888.8], [1.577196109E12, 5254.4], [1.577196107E12, 5490.5], [1.577196111E12, 5110.8], [1.577196125E12, 5181.200000000001], [1.577196123E12, 5252.400000000001], [1.577196127E12, 5118.4], [1.577196119E12, 5032.5], [1.577196121E12, 5294.8], [1.577196135E12, 4963.0], [1.577196092E12, 6267.6], [1.577196096E12, 6550.6], [1.577196094E12, 6693.4], [1.577196137E12, 4940.4], [1.577196088E12, 3122.4], [1.577196129E12, 5088.5], [1.57719609E12, 4781.400000000001], [1.577196133E12, 4978.5], [1.577196131E12, 5028.9], [1.577196104E12, 5717.0], [1.577196102E12, 5838.0], [1.577196106E12, 5544.6], [1.577196098E12, 6301.5], [1.577196139E12, 4889.900000000001], [1.5771961E12, 5969.799999999999], [1.577196114E12, 4942.8], [1.577196116E12, 4880.0], [1.577196108E12, 5306.8], [1.577196112E12, 5025.0], [1.57719611E12, 5187.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.577196124E12, 6824.15], [1.577196128E12, 6793.779999999999], [1.577196126E12, 6805.749999999996], [1.57719612E12, 6823.4], [1.577196118E12, 6838.160000000002], [1.577196122E12, 6833.980000000001], [1.577196093E12, 7114.82], [1.577196136E12, 6748.25], [1.577196091E12, 5812.0], [1.577196134E12, 6760.239999999998], [1.577196095E12, 7150.5999999999985], [1.577196138E12, 6721.399999999995], [1.577196087E12, 2030.0], [1.57719613E12, 6781.1799999999985], [1.577196089E12, 4146.0], [1.577196132E12, 6767.68], [1.577196103E12, 7012.680000000001], [1.577196105E12, 6970.2], [1.577196097E12, 7118.18], [1.57719614E12, 6715.899999999998], [1.577196101E12, 7079.560000000001], [1.577196099E12, 7106.04], [1.577196113E12, 6879.1799999999985], [1.577196115E12, 6845.44], [1.577196109E12, 6917.360000000001], [1.577196107E12, 6964.42], [1.577196111E12, 6909.52], [1.577196125E12, 6821.8], [1.577196123E12, 6825.449999999999], [1.577196127E12, 6796.999999999999], [1.577196119E12, 6828.850000000002], [1.577196121E12, 6825.9], [1.577196135E12, 6751.5999999999985], [1.577196092E12, 6938.15], [1.577196096E12, 7125.32], [1.577196094E12, 7222.58], [1.577196137E12, 6741.380000000001], [1.577196088E12, 3126.0], [1.577196129E12, 6790.42], [1.57719609E12, 5036.0], [1.577196133E12, 6766.27], [1.577196131E12, 6772.990000000002], [1.577196104E12, 6978.75], [1.577196102E12, 7051.399999999996], [1.577196106E12, 6965.48], [1.577196098E12, 7113.7], [1.577196139E12, 6716.810000000005], [1.5771961E12, 7100.039999999999], [1.577196114E12, 6859.080000000002], [1.577196116E12, 6841.579999999999], [1.577196108E12, 6950.22], [1.577196112E12, 6893.039999999995], [1.57719611E12, 6910.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.577196124E12, 5848.749999999999], [1.577196128E12, 5750.299999999999], [1.577196126E12, 5811.849999999999], [1.57719612E12, 5863.799999999999], [1.577196118E12, 5816.200000000001], [1.577196122E12, 5865.299999999999], [1.577196093E12, 6894.3], [1.577196136E12, 5620.25], [1.577196091E12, 5617.749999999999], [1.577196134E12, 5643.4], [1.577196095E12, 6826.0], [1.577196138E12, 5543.0], [1.577196087E12, 2030.0], [1.57719613E12, 5713.7], [1.577196089E12, 4033.2999999999997], [1.577196132E12, 5663.799999999999], [1.577196103E12, 6524.5999999999985], [1.577196105E12, 6339.199999999999], [1.577196097E12, 6763.599999999999], [1.57719614E12, 5526.95], [1.577196101E12, 6608.45], [1.577196099E12, 6664.0999999999985], [1.577196113E12, 5866.35], [1.577196115E12, 5815.0999999999985], [1.577196109E12, 6002.7999999999965], [1.577196107E12, 6125.699999999997], [1.577196111E12, 5906.9], [1.577196125E12, 5825.8], [1.577196123E12, 5856.5999999999985], [1.577196127E12, 5768.999999999991], [1.577196119E12, 5798.75], [1.577196121E12, 5890.499999999996], [1.577196135E12, 5632.5], [1.577196092E12, 6583.55], [1.577196096E12, 6792.4], [1.577196094E12, 6909.1], [1.577196137E12, 5566.199999999999], [1.577196088E12, 3126.0], [1.577196129E12, 5731.899999999999], [1.57719609E12, 4868.849999999999], [1.577196133E12, 5656.9], [1.577196131E12, 5701.849999999999], [1.577196104E12, 6429.5], [1.577196102E12, 6553.0], [1.577196106E12, 6242.999999999996], [1.577196098E12, 6724.5], [1.577196139E12, 5529.4000000000015], [1.5771961E12, 6628.25], [1.577196114E12, 5842.600000000001], [1.577196116E12, 5812.2], [1.577196108E12, 6062.5999999999985], [1.577196112E12, 5893.5], [1.57719611E12, 5941.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57719614E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3226.0, "minX": 1000.0, "maxY": 3656.0, "series": [{"data": [[3000.0, 3656.0], [1000.0, 3226.0], [2000.0, 3298.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 3000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3226.0, "minX": 1000.0, "maxY": 3656.0, "series": [{"data": [[3000.0, 3656.0], [1000.0, 3226.0], [2000.0, 3298.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 3000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.577196085E12, "maxY": 125.0, "series": [{"data": [[1.577196124E12, 26.0], [1.577196085E12, 35.0], [1.577196128E12, 41.0], [1.577196126E12, 77.0], [1.57719612E12, 67.0], [1.577196118E12, 17.0], [1.577196122E12, 57.0], [1.577196093E12, 40.0], [1.577196136E12, 25.0], [1.577196091E12, 20.0], [1.577196134E12, 35.0], [1.577196095E12, 61.0], [1.577196138E12, 15.0], [1.577196087E12, 4.0], [1.57719613E12, 49.0], [1.577196089E12, 12.0], [1.577196132E12, 62.0], [1.577196103E12, 45.0], [1.577196105E12, 58.0], [1.577196097E12, 53.0], [1.57719614E12, 1.0], [1.577196101E12, 62.0], [1.577196099E12, 66.0], [1.577196113E12, 32.0], [1.577196115E12, 62.0], [1.577196109E12, 62.0], [1.577196107E12, 53.0], [1.577196111E12, 49.0], [1.577196125E12, 48.0], [1.577196123E12, 52.0], [1.577196127E12, 34.0], [1.577196119E12, 50.0], [1.577196121E12, 49.0], [1.577196135E12, 38.0], [1.577196092E12, 60.0], [1.577196096E12, 30.0], [1.577196094E12, 32.0], [1.577196137E12, 38.0], [1.577196088E12, 9.0], [1.577196086E12, 125.0], [1.577196129E12, 57.0], [1.57719609E12, 41.0], [1.577196133E12, 44.0], [1.577196131E12, 39.0], [1.577196104E12, 50.0], [1.577196102E12, 54.0], [1.577196106E12, 54.0], [1.577196098E12, 28.0], [1.577196139E12, 2.0], [1.5771961E12, 46.0], [1.577196114E12, 65.0], [1.577196116E12, 21.0], [1.577196108E12, 47.0], [1.577196112E12, 64.0], [1.57719611E12, 37.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57719614E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.577196087E12, "maxY": 81.0, "series": [{"data": [[1.577196124E12, 26.0], [1.577196128E12, 41.0], [1.577196126E12, 77.0], [1.57719612E12, 67.0], [1.577196118E12, 18.0], [1.577196122E12, 56.0], [1.577196093E12, 40.0], [1.577196136E12, 35.0], [1.577196091E12, 20.0], [1.577196134E12, 45.0], [1.577196095E12, 61.0], [1.577196138E12, 74.0], [1.577196087E12, 4.0], [1.57719613E12, 49.0], [1.577196089E12, 13.0], [1.577196132E12, 63.0], [1.577196103E12, 44.0], [1.577196105E12, 57.0], [1.577196097E12, 51.0], [1.57719614E12, 4.0], [1.577196101E12, 64.0], [1.577196099E12, 63.0], [1.577196113E12, 33.0], [1.577196115E12, 62.0], [1.577196109E12, 62.0], [1.577196107E12, 53.0], [1.577196111E12, 49.0], [1.577196125E12, 47.0], [1.577196123E12, 53.0], [1.577196127E12, 35.0], [1.577196119E12, 49.0], [1.577196121E12, 50.0], [1.577196135E12, 54.0], [1.577196092E12, 60.0], [1.577196096E12, 32.0], [1.577196094E12, 32.0], [1.577196137E12, 81.0], [1.577196088E12, 9.0], [1.577196129E12, 56.0], [1.57719609E12, 40.0], [1.577196133E12, 47.0], [1.577196131E12, 39.0], [1.577196104E12, 51.0], [1.577196102E12, 53.0], [1.577196106E12, 54.0], [1.577196098E12, 32.0], [1.577196139E12, 17.0], [1.5771961E12, 45.0], [1.577196114E12, 65.0], [1.577196116E12, 20.0], [1.577196108E12, 47.0], [1.577196112E12, 64.0], [1.57719611E12, 37.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.57719614E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.577196087E12, "maxY": 81.0, "series": [{"data": [[1.577196124E12, 26.0], [1.577196128E12, 41.0], [1.577196126E12, 77.0], [1.57719612E12, 67.0], [1.577196118E12, 18.0], [1.577196122E12, 56.0], [1.577196093E12, 40.0], [1.577196136E12, 35.0], [1.577196091E12, 20.0], [1.577196134E12, 45.0], [1.577196095E12, 61.0], [1.577196138E12, 74.0], [1.577196087E12, 4.0], [1.57719613E12, 49.0], [1.577196089E12, 13.0], [1.577196132E12, 63.0], [1.577196103E12, 44.0], [1.577196105E12, 57.0], [1.577196097E12, 51.0], [1.57719614E12, 4.0], [1.577196101E12, 64.0], [1.577196099E12, 63.0], [1.577196113E12, 33.0], [1.577196115E12, 62.0], [1.577196109E12, 62.0], [1.577196107E12, 53.0], [1.577196111E12, 49.0], [1.577196125E12, 47.0], [1.577196123E12, 53.0], [1.577196127E12, 35.0], [1.577196119E12, 49.0], [1.577196121E12, 50.0], [1.577196135E12, 54.0], [1.577196092E12, 60.0], [1.577196096E12, 32.0], [1.577196094E12, 32.0], [1.577196137E12, 81.0], [1.577196088E12, 9.0], [1.577196129E12, 56.0], [1.57719609E12, 40.0], [1.577196133E12, 47.0], [1.577196131E12, 39.0], [1.577196104E12, 51.0], [1.577196102E12, 53.0], [1.577196106E12, 54.0], [1.577196098E12, 32.0], [1.577196139E12, 17.0], [1.5771961E12, 45.0], [1.577196114E12, 65.0], [1.577196116E12, 20.0], [1.577196108E12, 47.0], [1.577196112E12, 64.0], [1.57719611E12, 37.0]], "isOverall": false, "label": "ActivateProductSampler-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57719614E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.577196087E12, "maxY": 81.0, "series": [{"data": [[1.577196124E12, 26.0], [1.577196128E12, 41.0], [1.577196126E12, 77.0], [1.57719612E12, 67.0], [1.577196118E12, 18.0], [1.577196122E12, 56.0], [1.577196093E12, 40.0], [1.577196136E12, 35.0], [1.577196091E12, 20.0], [1.577196134E12, 45.0], [1.577196095E12, 61.0], [1.577196138E12, 74.0], [1.577196087E12, 4.0], [1.57719613E12, 49.0], [1.577196089E12, 13.0], [1.577196132E12, 63.0], [1.577196103E12, 44.0], [1.577196105E12, 57.0], [1.577196097E12, 51.0], [1.57719614E12, 4.0], [1.577196101E12, 64.0], [1.577196099E12, 63.0], [1.577196113E12, 33.0], [1.577196115E12, 62.0], [1.577196109E12, 62.0], [1.577196107E12, 53.0], [1.577196111E12, 49.0], [1.577196125E12, 47.0], [1.577196123E12, 53.0], [1.577196127E12, 35.0], [1.577196119E12, 49.0], [1.577196121E12, 50.0], [1.577196135E12, 54.0], [1.577196092E12, 60.0], [1.577196096E12, 32.0], [1.577196094E12, 32.0], [1.577196137E12, 81.0], [1.577196088E12, 9.0], [1.577196129E12, 56.0], [1.57719609E12, 40.0], [1.577196133E12, 47.0], [1.577196131E12, 39.0], [1.577196104E12, 51.0], [1.577196102E12, 53.0], [1.577196106E12, 54.0], [1.577196098E12, 32.0], [1.577196139E12, 17.0], [1.5771961E12, 45.0], [1.577196114E12, 65.0], [1.577196116E12, 20.0], [1.577196108E12, 47.0], [1.577196112E12, 64.0], [1.57719611E12, 37.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.57719614E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

